[
  {
    "id": 1,
    "word": "closure",
    "definition": "A function that has access to variables in its outer (enclosing) scope, even after the outer function has returned."
  },
  {
    "id": 2,
    "word": "hoisting",
    "definition": "The process of moving function and variable declarations to the top of their respective scopes during compilation."
  },
  {
    "id": 3,
    "word": "callback",
    "definition": "A function passed as an argument to another function, which is then invoked inside the outer function to complete some kind of action."
  },
  {
    "id": 4,
    "word": "prototype",
    "definition": "An object that is associated with every function and object by default in JavaScript, which allows for inheritance and the sharing of properties and methods."
  },
  {
    "id": 5,
    "word": "currying",
    "definition": "The process of transforming a function that takes multiple arguments into a function that takes them one at a time."
  },
  {
    "id": 6,
    "word": "scope",
    "definition": "The context in which a variable or function is declared, which determines its accessibility."
  },
  {
    "id": 7,
    "word": "IIFE",
    "definition": "Immediately Invoked Function Expression - a function that is executed as soon as it is defined."
  },
  {
    "id": 8,
    "word": "event loop",
    "definition": "The process by which JavaScript processes asynchronous events, such as user input, network requests, and timers."
  },
  {
    "id": 9,
    "word": "promise",
    "definition": "An object representing the eventual completion or failure of an asynchronous operation, which allows for more readable and maintainable asynchronous code."
  },
  {
    "id": 10,
    "word": "spread operator",
    "definition": "An operator that allows an iterable to be expanded into multiple arguments in a function call or multiple elements in an array literal."
  },
  {
    "id": 11,
    "word": "arrow function",
    "definition": "A shorthand syntax for writing function expressions, which does not bind its own this, arguments, super, or new.target."
  },
  {
    "id": 12,
    "word": "template literal",
    "definition": "A string literal that allows for embedded expressions and multi-line strings."
  },
  {
    "id": 13,
    "word": "destructuring",
    "definition": "A syntax for extracting values from arrays and objects and assigning them to variables."
  },
  {
    "id": 14,
    "word": "async/await",
    "definition": "A syntax for writing asynchronous code that looks and behaves like synchronous code, using the keywords async and await."
  },
  {
    "id": 15,
    "word": "let",
    "definition": "A keyword used to declare block-scoped variables, which are not accessible outside of their block."
  },
  {
    "id": 16,
    "word": "const",
    "definition": "A keyword used to declare block-scoped variables that cannot be reassigned."
  },
  {
    "id": 17,
    "word": "var",
    "definition": "A keyword used to declare function-scoped variables, which are accessible throughout the function and its nested functions."
  },
  {
    "id": 18,
    "word": "map",
    "definition": "A method on arrays that creates a new array by calling a provided function on every element in the calling array."
  },
  {
    "id": 19,
    "word": "filter",
    "definition": "A method on arrays that creates a new array with all elements that pass the test implemented by the provided function."
  },
  {
    "id": 20,
    "word": "reduce",
    "definition": "A method on arrays that applies a function against an accumulator and each element in the array to reduce it to a single value."
  }
]
