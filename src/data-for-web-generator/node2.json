[
  {
    "concept": "Matching game, Kahoot quiz, or Question + <input> for answer with # of letters",
    "explanation": ""
  },
  {
    "concept": "Event Loop",
    "explanation": "A mechanism that allows Node.js to perform non-blocking I/O operations despite the fact that JavaScript is single-threaded."
  },
  {
    "concept": "Callback Function",
    "explanation": "A function that is passed as an argument to another function and is executed after some operation has been completed."
  },
  {
    "concept": "Promise",
    "explanation": "An object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value."
  },
  {
    "concept": "Async/Await",
    "explanation": "A syntax for writing asynchronous code that looks like synchronous code, making it easier to read and write."
  },
  {
    "concept": "Buffer",
    "explanation": "A temporary holding spot for data being moved from one place to another. It is typically used to store binary data."
  },
  {
    "concept": "Stream",
    "explanation": "A sequence of data made available over time. It can be read from or written to asynchronously, making it ideal for handling large amounts of data."
  },
  {
    "concept": "Middleware",
    "explanation": "A function that sits between a client and a server and can intercept and modify requests and responses."
  },
  {
    "concept": "Routing",
    "explanation": "The process of determining how an application responds to a client request to a particular endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on)."
  },
  {
    "concept": "Template Engine",
    "explanation": "A tool that allows you to render dynamic HTML pages by combining static templates with data."
  },
  {
    "concept": "Authentication",
    "explanation": "The process of verifying the identity of a user or process."
  },
  {
    "concept": "Authorization",
    "explanation": "The process of determining whether a user or process has the necessary permissions to perform a particular action."
  },
  {
    "concept": "JSON Web Token (JWT)",
    "explanation": "A compact, URL-safe means of representing claims to be transferred between two parties. It is often used for authentication and authorization purposes."
  },
  {
    "concept": "WebSocket",
    "explanation": "A protocol that provides a full-duplex communication channel over a single TCP connection. It is often used for real-time web applications."
  },
  {
    "concept": "Cluster",
    "explanation": "A module that allows you to create child processes that share server ports to take advantage of multi-core systems."
  },
  {
    "concept": "Child Process",
    "explanation": "A separate instance of the Node.js process that can be spawned and controlled from a parent process."
  },
  {
    "concept": "Debugging",
    "explanation": "The process of finding and fixing errors (bugs) in code."
  },
  {
    "concept": "Testing",
    "explanation": "The process of verifying that code works as expected by running automated tests."
  },
  {
    "concept": "Package Manager",
    "explanation": "A tool that automates the process of installing, updating, configuring, and removing software packages."
  },
  {
    "concept": "Module",
    "explanation": "A self-contained unit of code that can be reused and imported into other modules."
  },
  {
    "concept": "NPM",
    "explanation": "A package manager for Node.js that allows you to easily install and manage third-party packages and modules."
  },
  {
    "concept": "Express",
    "explanation": "A popular web framework for Node.js that provides a set of features for building web applications and APIs."
  },
  {
    "concept": "Mongoose",
    "explanation": "An Object Data Modeling (ODM) library for MongoDB and Node.js that provides a higher-level API for interacting with MongoDB."
  },
  {
    "concept": "GraphQL",
    "explanation": "A query language for APIs that provides a more efficient, powerful, and flexible alternative to REST APIs."
  },
  {
    "concept": "TypeScript",
    "explanation": "A superset of JavaScript that adds optional static typing, classes, interfaces, and other features to JavaScript."
  },
  {
    "concept": "Webpack",
    "explanation": "A module bundler for JavaScript that takes modules with dependencies and generates static assets representing those modules."
  },
  {
    "concept": "Babel",
    "explanation": "A toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments."
  },
  {
    "concept": "Jest",
    "explanation": "A JavaScript testing framework that provides a simple way to write tests, run them, and see the results."
  },
  {
    "concept": "ESLint",
    "explanation": "A tool for identifying and reporting on patterns found in ECMAScript/JavaScript code, with the goal of making code more consistent and avoiding bugs."
  },
  {
    "concept": "Prettier",
    "explanation": "An opinionated code formatter that enforces a consistent style by parsing your code and re-printing it with its own rules."
  },
  {
    "concept": "Docker",
    "explanation": "A platform for developing, shipping, and running applications in containers, which are lightweight, portable, and self-contained environments."
  },
  {
    "concept": "Kubernetes",
    "explanation": "An open-source container orchestration system for automating deployment, scaling, and management of containerized applications."
  },
  {
    "concept": "Serverless",
    "explanation": "A cloud computing model where the cloud provider manages the infrastructure and automatically allocates resources as needed, allowing developers to focus on writing code."
  },
  {
    "concept": "CI/CD",
    "explanation": "A set of practices that combines continuous integration (CI) and continuous delivery (CD) to automate the building, testing, and deployment of software."
  },
  {
    "concept": "OAuth",
    "explanation": "An open standard for authorization that allows users to grant third-party applications access to their resources without sharing their passwords."
  },
  {
    "concept": "SSL/TLS",
    "explanation": "A protocol for establishing secure communication over the internet by encrypting data and verifying the identity of the server and client."
  },
  {
    "concept": "REST",
    "explanation": "A software architectural style that defines a set of constraints to be used for creating web services."
  },
  {
    "concept": "WebSocket",
    "explanation": "A protocol that provides a full-duplex communication channel over a single TCP connection. It is often used for real-time web applications."
  },
  {
    "concept": "WebRTC",
    "explanation": "A free, open-source project that provides web browsers and mobile applications with real-time communication (RTC) via simple application programming interfaces (APIs)."
  },
  {
    "concept": "WebAssembly",
    "explanation": "A binary instruction format for a stack-based virtual machine that is designed as a portable target for the compilation of high-level languages like C, C++, and Rust."
  },
  {
    "concept": "Web Components",
    "explanation": "A set of standardized APIs for creating reusable UI components that can be used across different web platforms and frameworks."
  },
  {
    "concept": "React",
    "explanation": "A JavaScript library for building user interfaces using a component-based architecture."
  },
  {
    "concept": "Vue.js",
    "explanation": "A progressive JavaScript framework for building user interfaces."
  },
  {
    "concept": "jQuery",
    "explanation": "A fast, small, and feature-rich JavaScript library that simplifies HTML document traversing, event handling, and animating."
  },
  {
    "concept": "Bootstrap",
    "explanation": "A free and open-source CSS framework directed at responsive, mobile-first front-end web development."
  },
  {
    "concept": "Material Design",
    "explanation": "A design language developed by Google that combines principles of classic design with innovation and technology."
  },
  {
    "concept": "Sass",
    "explanation": "A preprocessor scripting language that is interpreted or compiled into Cascading Style Sheets (CSS)."
  },
  {
    "concept": "LESS",
    "explanation": "A dynamic stylesheet language that can be compiled into Cascading Style Sheets (CSS) and run on the client-side or server-side."
  },
  {
    "concept": "PostCSS",
    "explanation": "A tool for transforming CSS with JavaScript plugins. These plugins can support variables and mixins, transpile future CSS syntax, inline images, and more."
  },
  {
    "concept": "Gulp",
    "explanation": "A toolkit for automating tasks in the development workflow. It can be used for tasks such as minification and concatenation of JavaScript and CSS files."
  },
  {
    "concept": "Grunt",
    "explanation": "A JavaScript task runner that automates repetitive tasks like minification, compilation, unit testing, and linting."
  },
  {
    "concept": "Webpack",
    "explanation": "A module bundler for JavaScript that takes modules with dependencies and generates static assets representing those modules."
  },
  {
    "concept": "Rollup",
    "explanation": "A module bundler for JavaScript that uses a tree-shaking algorithm to eliminate unused code and generate smaller bundles."
  },
  {
    "concept": "Babel",
    "explanation": "A toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments."
  },
  {
    "concept": "TypeScript",
    "explanation": "A superset of JavaScript that adds optional static typing, classes, interfaces, and other features to JavaScript."
  },
  {
    "concept": "Flow",
    "explanation": "A static type checker for JavaScript that helps catch common programming errors before they run."
  },
  {
    "concept": "ESLint",
    "explanation": "A tool for identifying and reporting on patterns found in ECMAScript/JavaScript code, with the goal of making code more consistent and avoiding bugs."
  },
  {
    "concept": "Prettier",
    "explanation": "An opinionated code formatter that enforces a consistent style by parsing your code and re-printing it with its own rules."
  },
  {
    "concept": "Jest",
    "explanation": "A JavaScript testing framework that provides a simple way to write tests, run them, and see the results."
  },
  {
    "concept": "Cypress",
    "explanation": "A JavaScript end-to-end testing framework that runs in the browser and provides a way to test web applications as a user would interact with them."
  },
  {
    "concept": "HTTP Request",
    "explanation": "A message sent from the client to the server to request a resource."
  },
  {
    "concept": "HTTP Response",
    "explanation": "A message sent from the server to the client in response to an HTTP request."
  },
  {
    "concept": "HTTP Status Code",
    "explanation": "A three-digit code returned by a server in response to a client's request. It indicates the status of the requested resource."
  },
  {
    "concept": "HTTP Header",
    "explanation": "A block of information sent by the client or server along with an HTTP request or response. It contains metadata about the request or response."
  },
  {
    "concept": "HTTP Method",
    "explanation": "A verb that indicates the desired action to be performed on a resource. Examples include GET, POST, PUT, DELETE, and PATCH."
  },
  {
    "concept": "HTTP Cache",
    "explanation": "A mechanism used to store and reuse previously fetched resources. It can improve performance by reducing the number of requests made to the server."
  },
  {
    "concept": "HTTP Cookie",
    "explanation": "A small piece of data sent from a website and stored on the user's computer by the user's web browser. It is used to remember stateful information and track user activity."
  },
  {
    "concept": "HTTP Redirect",
    "explanation": "A response sent by the server to the client that redirects the client to a different URL."
  },
  {
    "concept": "HTTP Proxy",
    "explanation": "A server that acts as an intermediary between a client and another server. It can be used to improve performance, filter requests, or provide anonymity."
  },
  {
    "concept": "HTTP Authentication",
    "explanation": "A mechanism used to verify the identity of a user or client. It can be used to restrict access to resources or to personalize content."
  },
  {
    "concept": "HTTP Session",
    "explanation": "A sequence of network request-response transactions that occur between a client and a server. It can be used to maintain stateful information across multiple requests."
  },
  {
    "concept": "HTTP Keep-Alive",
    "explanation": "A mechanism used to maintain a persistent connection between a client and a server. It can improve performance by reducing the overhead of establishing a new connection for each request."
  },
  {
    "concept": "HTTP Compression",
    "explanation": "A mechanism used to reduce the size of data sent over the network. It can improve performance by reducing the amount of data that needs to be transmitted."
  },
  {
    "concept": "HTTP Range Requests",
    "explanation": "A mechanism used to request a specific range of bytes from a resource. It can be used to download large files in smaller chunks or to resume interrupted downloads."
  },
  {
    "concept": "HTTP Referrer",
    "explanation": "A header sent by the client that indicates the URL of the page that linked to the current page. It can be used to track user activity or to prevent clickjacking attacks."
  },
  {
    "concept": "HTTP User-Agent",
    "explanation": "A header sent by the client that identifies the user agent making the request. It can be used to tailor content to specific devices or browsers."
  },
  {
    "concept": "HTTP ETag",
    "explanation": "A header sent by the server that provides a unique identifier for a resource. It can be used to optimize caching and reduce bandwidth usage."
  },
  {
    "concept": "HTTP If-Modified-Since",
    "explanation": "A header sent by the client that indicates the date and time that the client last received the requested resource. It can be used to optimize caching and reduce bandwidth usage."
  },
  {
    "concept": "HTTP Cross-Origin Resource Sharing (CORS)",
    "explanation": "A mechanism used to allow resources on a web page to be requested from another domain outside the domain from which the resource originated. It can be used to enable cross-domain AJAX requests."
  },
  {
    "concept": "HTTP Same-Origin Policy",
    "explanation": "A security feature implemented by web browsers that restricts web pages from making requests to a different domain than the one that served the original web page. It can be used to prevent cross-site scripting attacks."
  },
  {
    "concept": "Event Loop",
    "explanation": "A mechanism used by Node.js to handle asynchronous operations and non-blocking I/O. It allows Node.js to perform multiple operations concurrently without blocking the main thread."
  },
  {
    "concept": "Callback Function",
    "explanation": "A function passed as an argument to another function, which is then invoked when the operation is complete. It is commonly used in Node.js to handle asynchronous operations."
  },
  {
    "concept": "Non-Blocking I/O",
    "explanation": "A technique used by Node.js to perform I/O operations without blocking the main thread. It allows Node.js to handle multiple requests concurrently and improve performance."
  },
  {
    "concept": "Asynchronous Programming",
    "explanation": "A programming paradigm used by Node.js to handle I/O operations and other tasks that may take a long time to complete. It allows Node.js to perform multiple operations concurrently without blocking the main thread."
  },
  {
    "concept": "Event Emitter",
    "explanation": "An object in Node.js that emits events and allows other objects to listen for those events. It is commonly used in Node.js to handle asynchronous operations."
  },
  {
    "concept": "Event Handler",
    "explanation": "A function that is executed in response to an event. It is commonly used in Node.js to handle asynchronous operations."
  },
  {
    "concept": "Promise",
    "explanation": "An object in Node.js that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It is commonly used in Node.js to handle asynchronous operations."
  },
  {
    "concept": "Error-First Callback",
    "explanation": "A callback function in Node.js that takes an error object as its first argument, followed by any other data. It is commonly used in Node.js to handle errors in asynchronous operations."
  },
  {
    "concept": "Process.nextTick()",
    "explanation": "A method in Node.js that schedules a callback function to be executed on the next iteration of the event loop. It is commonly used in Node.js to handle asynchronous operations."
  },
  {
    "concept": "setImmediate()",
    "explanation": "A method in Node.js that schedules a callback function to be executed in the next iteration of the event loop, after I/O and timer callbacks. It is commonly used in Node.js to handle asynchronous operations."
  },
  {
    "concept": "setTimeout()",
    "explanation": "A method in Node.js that schedules a callback function to be executed after a specified delay, in milliseconds. It is commonly used in Node.js to handle asynchronous operations."
  },
  {
    "concept": "setInterval()",
    "explanation": "A method in Node.js that schedules a callback function to be executed repeatedly at a specified interval, in milliseconds. It is commonly used in Node.js to handle asynchronous operations."
  },
  {
    "concept": "process.nextTick() vs setImmediate()",
    "explanation": "Two methods in Node.js that schedule callback functions to be executed on the next iteration of the event loop. process.nextTick() executes before setImmediate(), and is used for high-priority callbacks. setImmediate() executes after I/O and timer callbacks, and is used for low-priority callbacks."
  },
  {
    "concept": "Microtask Queue",
    "explanation": "A queue in Node.js that holds microtasks, which are executed immediately after the current task completes. It is used to handle asynchronous operations in Node.js."
  },
  {
    "concept": "Macrotask Queue",
    "explanation": "A queue in Node.js that holds macrotasks, which are executed after all microtasks have completed. It is used to handle asynchronous operations in Node.js."
  },
  {
    "concept": "I/O Polling",
    "explanation": "A mechanism used by Node.js to check for I/O events and execute their corresponding callbacks. It is used to handle asynchronous operations in Node.js."
  },
  {
    "concept": "Timers",
    "explanation": "A mechanism used by Node.js to schedule callbacks to be executed after a specified delay or at a specified interval. It is used to handle asynchronous operations in Node.js."
  },
  {
    "concept": "Immediate Queue",
    "explanation": "A queue in Node.js that holds immediate callbacks, which are executed after I/O callbacks but before timers. It is used to handle asynchronous operations in Node.js."
  },
  {
    "concept": "Event Loop Phases",
    "explanation": "The different phases of the event loop in Node.js, including timers, I/O polling, immediate callbacks, and close callbacks. Each phase executes its corresponding callbacks in a specific order."
  },
  {
    "concept": "Close Callbacks",
    "explanation": "A mechanism used by Node.js to execute callbacks when a resource (such as a socket or file descriptor) is closed. It is used to handle asynchronous operations in Node.js."
  }
]
